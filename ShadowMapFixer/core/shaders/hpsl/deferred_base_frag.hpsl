////////////////////////////////////////////////////////
// Deferred Base - Fragment Shader
//
// A basic fragment with little fancy stuff. 
////////////////////////////////////////////////////////

//Minor bug fix by SDT (Stray Dogs Territory).

//////////////
// TEXTURES
@ifdef UseDiffuse || UseAlphaMap
	uniform cTexture2D aDiffuseMap : 0;
@endif

@ifdef UseDissolve || UseAlphaUseDissolveFilter
	uniform cTexture3D aDissolveMap : 14;
@endif

@ifdef UseTextureBuffer

	// This contains all constant buffers and chooses the correct one based on MaterialType
	@include helper_type_arguments.hpsl

@else
@ifdef UseDissolve	
	uniform float afDissolveAmount;
@endif
@endif

@ifdef UseDissolveAlphaMap
	uniform cTexture2D aDissolveAlphaMap : 2;
@endif

void main(in cVector4f px_vPosition,
@ifdef UseUv
		  in cVector4f px_vTexCoord0,
@endif
@ifdef UseNormals
		  in cVector3f px_vNormal,
@endif
@ifdef UseColor
		  in cVector4f px_vColor,
@endif
@ifdef UseTextureBuffer
	@ifdef UseDissolve
		  in float afDissolveAmount,
	@endif
@endif
		  out cVector4f out_vColor : 0)
{
	cVector4f vFinalColor;
	
	////////////////////
	//Diffuse 
	@ifdef UseDiffuse || UseAlphaMap
	 	vFinalColor = sample(aDiffuseMap, px_vTexCoord0.xy);
	@else	
		vFinalColor = cVector4f(1.0, 1.0, 1.0, 1.0);
	@endif
	
	////////////////////
	//Vertex colors
	@ifdef UseColor
		vFinalColor *= px_vColor;
	@endif
	
	////////////////////
	//Dissolve
	@ifdef UseDissolve || UseAlphaUseDissolveFilter
		cVector2f vDissolveCoords = px_vPosition.xy * (1.0/128.0);//128 = size of dissolve texture.
		
		@ifdef UseTextureBuffer && MaterialType_SolidDiffuse
			float fDissolve = sample(aDissolveMap, cVector3f(vDissolveCoords, abs(afDissolveLayer))).w * (255.0 / 256.0) + (0.5 / 256.0);
			fDissolve = afDissolveAmount < 0 ? (1 - fDissolve) : fDissolve; 	// Invert if amount is negative

			float fDissolveAlpha = abs(afDissolveAmount);

			@ifdef UseAlphaMap
				fDissolveAlpha *= min(vFinalColor.w * afAlphaCutoffThreshold, 1.0);
			@endif

			vFinalColor.w = (fDissolveAlpha < fDissolve) ? 0.0 : 1.0;
		@else
			float fDissolve = sample(aDissolveMap, cVector3f(vDissolveCoords, 0.625)).w * (255.0 / 256.0) + (0.5 / 256.0);
			fDissolve = afDissolveAmount < 0 ? (1 - fDissolve) : fDissolve; 	// Invert if amount is negative
			vFinalColor.w = (abs(afDissolveAmount) < fDissolve) ? 0.0 : 1.0;
		@endif
	@endif 

// here is the root of the issue. The base game's shader discards the result when its < 1, which makes the shadows blurry and ill-defined. What I find the most odd though is that this change seems to have been intentional, as the 
// prior game in the series, Rebirth, which uses the same engine and shaders, has the value set at .5, which is what I've gone with. I could only see this being done as a hacky way to increase performance, but from what I've seen, the // actual performance increase is so negligable that it doesn't even show up in the profiler built into HPL3. -SDT
	@ifdef UseDissolve || UseAlphaUseDissolveFilter || UseAlphaMap
		if(vFinalColor.w < 0.5) discard;
	@endif
		 
	out_vColor = vFinalColor;

}

